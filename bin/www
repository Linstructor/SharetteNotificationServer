#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";
const app = require('../app');
const debug = require('debug')('untitled5:server');
const http = require('http');
const crypto = require('crypto');
const nodeRsa = require('node-rsa');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

console.log("Key generation...");
const server = http.createServer(app);

/*const rsa = new nodeRsa();
rsa.setOptions({encryptionScheme: 'pkcs1'});
rsa.generateKeyPair(2048, 77777);
const keyP = {
    key : rsa.exportKey("pkcs8-public-pem")
};
console.log("public key: "+keyP.key);
console.log("private key: "+rsa.exportKey("pkcs8-private-pem"));
console.log("Server creation...");*/


const socket = require('socket.io')(server);
socket.on("connection", function (socket) {
    console.log("Connectionlolilol");
    socket.emit('lol', 'lalalala');
    /*let keySym;
    let name;
    console.log("-User connected");

    socket.on("key_ask", function (data) {
        console.log("-key_ask");
        // console.log(data);
        console.log("key_re");
        socket.emit("key_re",JSON.stringify(keyP));
        socket.on("key_send", function (data, ack) {
            console.log("--key_send");
            try{
                let sym = rsa.decrypt(new Buffer(data), "utf8");
                let keyEncrypt = JSON.parse(sym);
                keySym = keyEncrypt.key;
                // let iv = keyEncrypt.iv;
                let iv = "azertyuiopqsdfgh";
                console.log("---keysym: "+keySym);
                console.log("---iv: "+iv);
                let testNotif = {app: "abcdef", content: "mdr le content", image : "null"};
                let cipher = crypto.createCipheriv('aes-256-cbc', new Buffer(keySym, 'base64'), new Buffer(iv));
                cipher.setAutoPadding(true);
                let jsonmsg = JSON.stringify(testNotif);
                console.log("--" + jsonmsg);
                let crypted = cipher.update(jsonmsg, 'utf8', 'base64');
                crypted += cipher.final('base64');
                console.log("---Crypted: "+crypted);
                ack('ok');
                socket.emit("notif", crypted);
            }catch(error){
                console.error("error: "+error);
                ack('error');
            }
        });
    });
    socket.on('user_info', function (data) {
        console.log("user_info: "+data);
        try {
            data = new Buffer(data, 'utf8');
            let cipher = crypto.createCipheriv('aes-256-cbc', new Buffer(keySym, 'base64'), new Buffer("azertyuiopqsdfgh"));
            cipher.setAutoPadding(true);
            let decrypted = cipher.update(data, 'utf8', 'base64') + cipher.final('base64');
            console.log("DecryptedUtf8: "+new Buffer(decrypted).toString('utf8'));
            // var jsonUser = JSON.parse(decrypted);
            // name = jsonUser.name;
            console.log(name);
        }catch (err){
            console.log(err);
        }

    });*/
    socket.on('disconnect', function(){
        console.log("-Disconnection");
    });
});

function decrypt(message){

}
socket.listen(3001);
console.log("Web server active");


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(3000);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
